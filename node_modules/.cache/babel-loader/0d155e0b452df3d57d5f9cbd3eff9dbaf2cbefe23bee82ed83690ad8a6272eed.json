{"ast":null,"code":"var _jsxFileName = \"/home/yun/Desktop/codestates/codestates_deploy_test/src/pages/MyPage/index.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Footer from '../../components/Layout/Footer';\nimport Tweet from '../../components/Tweet';\nimport styles from './MyPage.module.css';\nimport dummyTweets from '../../static/dummyData';\n\n// TODO : 주어진 트윗 목록(dummyTweets)중 현재 유져인 parkhacker의 트윗만 보여줘야 합니다.\n//💡MEMO: Tweets페이지에서 추가한 tweet을 MyPage에도 나오게 하려고 Tweets페이지에 있는 코드를 중복되게 썼는데 더 좋은 방법이 있을까요?\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MyPage = () => {\n  _s();\n  var _filteredTweets$, _filteredTweets$2;\n  const [tweets, setTweets] = useState(localStorage.getItem(dummyTweets) ? JSON.parse(localStorage.getItem(dummyTweets)) : dummyTweets);\n  useEffect(() => {\n    const tweets_local = localStorage.getItem(dummyTweets);\n    if (tweets_local) {\n      setTweets(JSON.parse(tweets_local));\n    }\n  }, []);\n  useEffect(() => {\n    if (tweets) {\n      localStorage.setItem(dummyTweets, JSON.stringify(tweets));\n    }\n  }, [tweets]);\n  const filteredTweets = tweets.filter(tweet => {\n    return tweet.username === \"parkhacker\";\n  });\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: styles.myInfo,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: styles.myInfo__container,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: styles.myInfo__wrapper,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.myInfo__profile,\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: (_filteredTweets$ = filteredTweets[0]) === null || _filteredTweets$ === void 0 ? void 0 : _filteredTweets$.picture\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.myInfo__detail,\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: styles.myInfo__detailName,\n            children: (_filteredTweets$2 = filteredTweets[0]) === null || _filteredTweets$2 === void 0 ? void 0 : _filteredTweets$2.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"28 \\uD314\\uB85C\\uC6CC 100 \\uD314\\uB85C\\uC789\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: styles.tweets__mypage,\n      children: filteredTweets.map(tweet => {\n        return /*#__PURE__*/_jsxDEV(Tweet, {\n          tweet: tweet\n        }, tweet.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 20\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(MyPage, \"amXEg5eWuUSsxdXzfcvb08a72ng=\");\n_c = MyPage;\nexport default MyPage;\nvar _c;\n$RefreshReg$(_c, \"MyPage\");","map":{"version":3,"names":["React","useEffect","useState","Footer","Tweet","styles","dummyTweets","MyPage","tweets","setTweets","localStorage","getItem","JSON","parse","tweets_local","setItem","stringify","filteredTweets","filter","tweet","username","myInfo","myInfo__container","myInfo__wrapper","myInfo__profile","picture","myInfo__detail","myInfo__detailName","tweets__mypage","map","id"],"sources":["/home/yun/Desktop/codestates/codestates_deploy_test/src/pages/MyPage/index.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Footer from '../../components/Layout/Footer';\nimport Tweet from '../../components/Tweet';\nimport styles from './MyPage.module.css';\nimport dummyTweets from '../../static/dummyData';\n\n// TODO : 주어진 트윗 목록(dummyTweets)중 현재 유져인 parkhacker의 트윗만 보여줘야 합니다.\n//💡MEMO: Tweets페이지에서 추가한 tweet을 MyPage에도 나오게 하려고 Tweets페이지에 있는 코드를 중복되게 썼는데 더 좋은 방법이 있을까요?\nconst MyPage = () => {\n  const [tweets, setTweets] = useState(\n    localStorage.getItem(dummyTweets) \n    ? JSON.parse(localStorage.getItem(dummyTweets))\n    : dummyTweets);\n  \n  useEffect(() => {\n    const tweets_local = localStorage.getItem(dummyTweets);\n    if (tweets_local) {\n      setTweets(JSON.parse(tweets_local));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (tweets) {\n      localStorage.setItem(dummyTweets, JSON.stringify(tweets));\n    }\n  }, [tweets]);\n\n  const filteredTweets = tweets.filter(tweet => {\n     return tweet.username === \"parkhacker\"\n  })\n  \n  return (\n    <section className={styles.myInfo}>\n      <div className={styles.myInfo__container}>\n        <div className={styles.myInfo__wrapper}>\n          <div className={styles.myInfo__profile}>\n            {/*💡MEMO: 1) 만약 parkhacker의 tweet가 없을 경우엔 에러발생하지 않게 옵셔널체이닝으로 처리하는게 괜찮은 방법일까요? 더 좋은 방법이 있을까요?  \n                       2) 밑에 username은 옵셔널체이닝을 할 경우에 에러발생은 안하지만 이름이 뜨지 않는데 그냥 \"parkhaker\"라고 명시해주어야 하나요? 다른 방법있을까요?\n            */}\n            <img src={filteredTweets[0]?.picture} />\n          </div>\n          <div className={styles.myInfo__detail}>\n            <p className={styles.myInfo__detailName}>\n              {filteredTweets[0]?.username}\n            </p>\n            <p>28 팔로워 100 팔로잉</p>\n          </div>\n        </div>\n      </div>\n      <ul className={styles.tweets__mypage}>\n        {/* TODO : 주어진 트윗 목록(dummyTweets)중 현재 유져인 parkhacker의 트윗만 보여줘야 합니다. */}\n         {\n          filteredTweets.map((tweet) => {\n            return <Tweet key={tweet.id} tweet={tweet} />\n          })\n         } \n      </ul>\n      <Footer />\n    </section>\n  );\n};\n\nexport default MyPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,MAAM,MAAM,gCAAgC;AACnD,OAAOC,KAAK,MAAM,wBAAwB;AAC1C,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,WAAW,MAAM,wBAAwB;;AAEhD;AACA;AAAA;AACA,MAAMC,MAAM,GAAG,MAAM;EAAA;EAAA;EACnB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGP,QAAQ,CAClCQ,YAAY,CAACC,OAAO,CAACL,WAAW,CAAC,GAC/BM,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAACL,WAAW,CAAC,CAAC,GAC7CA,WAAW,CAAC;EAEhBL,SAAS,CAAC,MAAM;IACd,MAAMa,YAAY,GAAGJ,YAAY,CAACC,OAAO,CAACL,WAAW,CAAC;IACtD,IAAIQ,YAAY,EAAE;MAChBL,SAAS,CAACG,IAAI,CAACC,KAAK,CAACC,YAAY,CAAC,CAAC;IACrC;EACF,CAAC,EAAE,EAAE,CAAC;EAENb,SAAS,CAAC,MAAM;IACd,IAAIO,MAAM,EAAE;MACVE,YAAY,CAACK,OAAO,CAACT,WAAW,EAAEM,IAAI,CAACI,SAAS,CAACR,MAAM,CAAC,CAAC;IAC3D;EACF,CAAC,EAAE,CAACA,MAAM,CAAC,CAAC;EAEZ,MAAMS,cAAc,GAAGT,MAAM,CAACU,MAAM,CAACC,KAAK,IAAI;IAC3C,OAAOA,KAAK,CAACC,QAAQ,KAAK,YAAY;EACzC,CAAC,CAAC;EAEF,oBACE;IAAS,SAAS,EAAEf,MAAM,CAACgB,MAAO;IAAA,wBAChC;MAAK,SAAS,EAAEhB,MAAM,CAACiB,iBAAkB;MAAA,uBACvC;QAAK,SAAS,EAAEjB,MAAM,CAACkB,eAAgB;QAAA,wBACrC;UAAK,SAAS,EAAElB,MAAM,CAACmB,eAAgB;UAAA,uBAIrC;YAAK,GAAG,sBAAEP,cAAc,CAAC,CAAC,CAAC,qDAAjB,iBAAmBQ;UAAQ;YAAA;YAAA;YAAA;UAAA;QAAG;UAAA;UAAA;UAAA;QAAA,QACpC,eACN;UAAK,SAAS,EAAEpB,MAAM,CAACqB,cAAe;UAAA,wBACpC;YAAG,SAAS,EAAErB,MAAM,CAACsB,kBAAmB;YAAA,+BACrCV,cAAc,CAAC,CAAC,CAAC,sDAAjB,kBAAmBG;UAAQ;YAAA;YAAA;YAAA;UAAA,QAC1B,eACJ;YAAA,UAAG;UAAc;YAAA;YAAA;YAAA;UAAA,QAAI;QAAA;UAAA;UAAA;UAAA;QAAA,QACjB;MAAA;QAAA;QAAA;QAAA;MAAA;IACF;MAAA;MAAA;MAAA;IAAA,QACF,eACN;MAAI,SAAS,EAAEf,MAAM,CAACuB,cAAe;MAAA,UAGjCX,cAAc,CAACY,GAAG,CAAEV,KAAK,IAAK;QAC5B,oBAAO,QAAC,KAAK;UAAgB,KAAK,EAAEA;QAAM,GAAvBA,KAAK,CAACW,EAAE;UAAA;UAAA;UAAA;QAAA,QAAkB;MAC/C,CAAC;IAAC;MAAA;MAAA;MAAA;IAAA,QAED,eACL,QAAC,MAAM;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACF;AAEd,CAAC;AAAC,GApDIvB,MAAM;AAAA,KAANA,MAAM;AAsDZ,eAAeA,MAAM;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}