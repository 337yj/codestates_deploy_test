{"ast":null,"code":"var _jsxFileName = \"/home/yun/Desktop/abc-lab-fe-react-twittler-state-props/src/pages/Tweets.js\",\n  _s = $RefreshSig$();\n// TODO : useState를 react로 부터 import 합니다.\nimport React, { useRef, useState } from 'react';\nimport Footer from '../components/Layout/Footer';\nimport Tweet from '../components/Tweet';\nimport './Tweets.scss';\nimport dummyTweets from '../static/dummyData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Tweets = () => {\n  _s();\n  // TODO : 새로 트윗을 작성하고 전송할 수 있게 useState를 적절히 활용하세요.\n  const [tweets, setTweets] = useState(dummyTweets);\n  // const [name, setName] = useState(\"\")\n  // const [msg, setMsg] = useState(\"\")\n  const [form, setForm] = useState({\n    user: \"parkhacker\",\n    msg: \"\"\n  });\n  // const [nextId, setNextId] = useState(6);\n  const parsedDate = new Date().toLocaleDateString('ko-kr');\n  const sortedItems = tweets.sort((a, b) => b.id - a.id);\n\n  // console.log(sortedItems)\n  // <Tweet key={el.id} tweet={dummyTweets[i]} />\n  const nextId = useRef(6);\n  const handleButtonClick = event => {\n    // TODO : Tweet button 엘리먼트 클릭시 작동하는 함수를 완성하세요.\n    // 트윗 전송이 가능하게 작성해야 합니다.\n    const tweet = {\n      id: nextId.current,\n      username: form.user,\n      content: form.msg,\n      createdAt: parsedDate,\n      picture: `https://randomuser.me/api/portraits/men/98.jpg`\n    };\n    nextId.current += 1;\n    setTweets(prev => [...prev, tweet]);\n    setForm({\n      user: \"parkhacker\",\n      msg: \"\"\n    });\n    console.log(tweet);\n    console.log(tweets);\n    // console.log(dummyTweets)\n  };\n\n  const handleChangeUser = event => {\n    // TODO : Tweet input 엘리먼트에 입력 시 작동하는 함수를 완성하세요.\n    const {\n      name,\n      value\n    } = event.currentTarget;\n    setForm({\n      ...form,\n      [name]: value\n    });\n    console.log(form);\n    // console.log(event.currentTarget.value)\n    // setName(event.currentTarget.value)\n  };\n\n  // const handleChangeMsg = (event) => {\n  //   // TODO : Tweet textarea 엘리먼트에 입력 시 작동하는 함수를 완성하세요.\n  //   const {name, value} = event.currentTarget\n  //   setForm({...form, [name]: value})\n  //   console.log(form)\n  //   // setMsg(event.currentTarget.value)\n  // };\n\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tweetForm__container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"tweetForm__wrapper\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tweetForm__profile\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: \"https://randomuser.me/api/portraits/men/98.jpg\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"tweetForm__inputContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tweetForm__inputWrapper\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tweetForm__input\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\"\n                // defaultValue=\"parkhacker\"\n                ,\n                placeholder: \"your username here..\",\n                name: \"user\",\n                value: form.user,\n                className: \"tweetForm__input--username\",\n                onChange: handleChangeUser\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 67,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                type: \"text\",\n                placeholder: \"your tweet here..\",\n                name: \"msg\",\n                value: form.msg,\n                className: \"tweetForm__input--message\",\n                onChange: handleChangeUser\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 77,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 66,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tweetForm__count\",\n              role: \"status\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"tweetForm__count__text\",\n                children: [\"total: \", tweets.length]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"tweetForm__submit\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"tweetForm__submitIcon\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"tweetForm__submitButton\",\n              onClick: handleButtonClick,\n              children: \"Tweet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tweet__selectUser\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"tweets\",\n      children: sortedItems.map((el, i) => {\n        return /*#__PURE__*/_jsxDEV(Tweet, {\n          tweet: tweets[i]\n        }, el.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 7\n  }, this);\n};\n_s(Tweets, \"3YNcqniXnprrBWU3oHXpo9B3aFM=\");\n_c = Tweets;\nexport default Tweets;\n{/* <React.Fragment>\n <div className={styles.tweetForm__container}>\n  <div className={styles.tweetForm__wrapper}>\n    <div className={styles.tweetForm__profile}>\n      <img src=\"https://randomuser.me/api/portraits/men/98.jpg\" />\n    </div>\n    <div className={styles.tweetForm__inputContainer}>\n      <div className={(styles.tweetForm, styles[\"inputWrapper\"])}>\n        <div className={(styles.tweetForm, styles[\"input\"])}>\n          <input\n            type=\"text\"\n            defaultValue=\"parkhacker\"\n            placeholder=\"your username here..\"\n            className={(styles.tweetForm__input, styles[\"username\"])}\n          ></input>\n          TODO : 트윗을 작성할 수 있는 textarea 엘리먼트를 작성하세요.\n        </div>\n        <div className={styles.tweetForm__count} role=\"status\">\n          <span className={styles.tweetForm__count__text}>\n            {/* TODO : 트윗 총 개수를 보여줄 수 있는 Counter를 작성하세요. */}\n//             {'total: '}\n//           </span>\n//         </div>\n//       </div>\n//       <div className={styles.tweetForm__submit}>\n//         <div className={styles.tweetForm__submitIcon}></div>\n//         {/* TODO : 작성한 트윗을 전송할 수 있는 button 엘리먼트를 작성하세요. */}\n//       </div>\n//     </div>\n//   </div>\n// </div>\n// <div className={styles.tweet__selectUser}></div>\n// <ul className={styles.tweets}>\n{/* TODO : 하나의 트윗이 아니라, 주어진 트윗 목록(dummyTweets) 갯수에 맞게 보여줘야 합니다. */}\n{/* <Tweet tweet={dummyTweets[0]} />\n </ul>\n <Footer />\n </React.Fragment> */}\nvar _c;\n$RefreshReg$(_c, \"Tweets\");","map":{"version":3,"names":["React","useRef","useState","Footer","Tweet","dummyTweets","Tweets","tweets","setTweets","form","setForm","user","msg","parsedDate","Date","toLocaleDateString","sortedItems","sort","a","b","id","nextId","handleButtonClick","event","tweet","current","username","content","createdAt","picture","prev","console","log","handleChangeUser","name","value","currentTarget","length","map","el","i"],"sources":["/home/yun/Desktop/abc-lab-fe-react-twittler-state-props/src/pages/Tweets.js"],"sourcesContent":["// TODO : useState를 react로 부터 import 합니다.\nimport React, { useRef, useState } from 'react';\nimport Footer from '../components/Layout/Footer';\nimport Tweet from '../components/Tweet';\nimport './Tweets.scss';\nimport dummyTweets from '../static/dummyData';\n\nconst Tweets = () => {\n  // TODO : 새로 트윗을 작성하고 전송할 수 있게 useState를 적절히 활용하세요.\n  const [tweets, setTweets] = useState(dummyTweets)\n  // const [name, setName] = useState(\"\")\n  // const [msg, setMsg] = useState(\"\")\n  const [form, setForm] = useState({user: \"parkhacker\", msg: \"\"})\n  // const [nextId, setNextId] = useState(6);\n  const parsedDate = new Date().toLocaleDateString('ko-kr');\n  const sortedItems = tweets.sort((a, b) => (b.id - a.id))\n\n  // console.log(sortedItems)\n  // <Tweet key={el.id} tweet={dummyTweets[i]} />\n  const nextId = useRef(6)\n  const handleButtonClick = (event) => {\n    // TODO : Tweet button 엘리먼트 클릭시 작동하는 함수를 완성하세요.\n    // 트윗 전송이 가능하게 작성해야 합니다.\n    const tweet = {\n      id: nextId.current,\n      username: form.user,\n      content: form.msg,\n      createdAt: parsedDate,\n      picture: `https://randomuser.me/api/portraits/men/98.jpg`\n    }\n    nextId.current += 1\n    setTweets((prev)=>([...prev, tweet]))\n    setForm({user: \"parkhacker\", msg: \"\"})\n    console.log(tweet)\n    console.log(tweets)\n    // console.log(dummyTweets)\n  };\n \n\n  const handleChangeUser = (event) => {\n    // TODO : Tweet input 엘리먼트에 입력 시 작동하는 함수를 완성하세요.\n    const {name, value} = event.currentTarget\n    setForm({...form, [name]: value})\n    console.log(form)\n    // console.log(event.currentTarget.value)\n    // setName(event.currentTarget.value)\n  };\n\n  // const handleChangeMsg = (event) => {\n  //   // TODO : Tweet textarea 엘리먼트에 입력 시 작동하는 함수를 완성하세요.\n  //   const {name, value} = event.currentTarget\n  //   setForm({...form, [name]: value})\n  //   console.log(form)\n  //   // setMsg(event.currentTarget.value)\n  // };\n\n  return (\n      <React.Fragment>\n      <div className=\"tweetForm__container\">\n        <div className=\"tweetForm__wrapper\">\n          <div className=\"tweetForm__profile\">\n            <img src=\"https://randomuser.me/api/portraits/men/98.jpg\" />\n          </div>\n          <div className=\"tweetForm__inputContainer\">\n            <div className=\"tweetForm__inputWrapper\">\n              <div className=\"tweetForm__input\">\n                <input\n                  type=\"text\"\n                  // defaultValue=\"parkhacker\"\n                  placeholder=\"your username here..\"\n                  name='user'\n                  value={form.user}\n                  className=\"tweetForm__input--username\"\n                  onChange={handleChangeUser}\n                ></input>\n                {/* TODO : 트윗을 작성할 수 있는 textarea 엘리먼트를 작성하세요. */}\n                <textarea\n                  type=\"text\"\n                  placeholder='your tweet here..'\n                  name='msg'\n                  value={form.msg}\n                  className='tweetForm__input--message'\n                  onChange={handleChangeUser}\n                  ></textarea>\n              </div>\n              <div className=\"tweetForm__count\" role=\"status\">\n                <span className=\"tweetForm__count__text\">\n                  {/* TODO : 트윗 총 개수를 보여줄 수 있는 Counter를 작성하세요. */}\n                  total: {tweets.length}\n                </span>\n              </div>\n            </div>\n            <div className=\"tweetForm__submit\">\n              <div className=\"tweetForm__submitIcon\"></div>\n              {/* TODO : 작성한 트윗을 전송할 수 있는 button 엘리먼트를 작성하세요. */}\n              <button \n                type='button' \n                className=\"tweetForm__submitButton\"\n                onClick={handleButtonClick}\n              >Tweet</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"tweet__selectUser\"></div>\n      <ul className=\"tweets\">\n        {/* TODO : 하나의 트윗이 아니라, 주어진 트윗 목록(dummyTweets) 갯수에 맞게 보여줘야 합니다. */}  \n        {\n          sortedItems.map((el,i)=>{\n            return (\n              <Tweet key={el.id} tweet={tweets[i]} />\n            )\n          })\n        }\n      </ul>\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default Tweets;\n\n\n{/* <React.Fragment>\n<div className={styles.tweetForm__container}>\n  <div className={styles.tweetForm__wrapper}>\n    <div className={styles.tweetForm__profile}>\n      <img src=\"https://randomuser.me/api/portraits/men/98.jpg\" />\n    </div>\n    <div className={styles.tweetForm__inputContainer}>\n      <div className={(styles.tweetForm, styles[\"inputWrapper\"])}>\n        <div className={(styles.tweetForm, styles[\"input\"])}>\n          <input\n            type=\"text\"\n            defaultValue=\"parkhacker\"\n            placeholder=\"your username here..\"\n            className={(styles.tweetForm__input, styles[\"username\"])}\n          ></input>\n          TODO : 트윗을 작성할 수 있는 textarea 엘리먼트를 작성하세요.\n        </div>\n        <div className={styles.tweetForm__count} role=\"status\">\n          <span className={styles.tweetForm__count__text}>\n            {/* TODO : 트윗 총 개수를 보여줄 수 있는 Counter를 작성하세요. */}\n//             {'total: '}\n//           </span>\n//         </div>\n//       </div>\n//       <div className={styles.tweetForm__submit}>\n//         <div className={styles.tweetForm__submitIcon}></div>\n//         {/* TODO : 작성한 트윗을 전송할 수 있는 button 엘리먼트를 작성하세요. */}\n//       </div>\n//     </div>\n//   </div>\n// </div>\n// <div className={styles.tweet__selectUser}></div>\n// <ul className={styles.tweets}>\n  {/* TODO : 하나의 트윗이 아니라, 주어진 트윗 목록(dummyTweets) 갯수에 맞게 보여줘야 합니다. */}\n  {/* <Tweet tweet={dummyTweets[0]} />\n</ul>\n<Footer />\n</React.Fragment> */} "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}