{"ast":null,"code":"import _defineProperty from\"/home/yun/Desktop/abc-lab-fe-react-twittler-state-props/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _objectSpread from\"/home/yun/Desktop/abc-lab-fe-react-twittler-state-props/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _toConsumableArray from\"/home/yun/Desktop/abc-lab-fe-react-twittler-state-props/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _slicedToArray from\"/home/yun/Desktop/abc-lab-fe-react-twittler-state-props/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";// TODO : useState를 react로 부터 import 합니다.\nimport React,{useEffect,useState}from'react';import Footer from'../../components/Layout/Footer';import Tweet from'../../components/Tweet';import styles from\"./Tweets.module.css\";import dummyTweets from'../../static/dummyData';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var getRandomNumber=function getRandomNumber(min,max){return parseInt(Math.random()*(Number(max)-Number(min)+2));};var Tweets=function Tweets(){// TODO : 새로 트윗을 작성하고 전송할 수 있게 useState를 적절히 활용하세요.\n//💡MEMO: 새로고침시에도 tweet추가한 값을 유지하고 싶어서 코드를 짜봤는데 이것저것 섞여서 복잡해보이는거 같아요.. 더 좋은 방법있을까요?\nvar _useState=useState(localStorage.getItem(dummyTweets)?JSON.parse(localStorage.getItem(dummyTweets)):dummyTweets),_useState2=_slicedToArray(_useState,2),tweets=_useState2[0],setTweets=_useState2[1];useEffect(function(){var tweets_local=localStorage.getItem(dummyTweets);if(tweets_local){setTweets(JSON.parse(tweets_local));}},[]);useEffect(function(){if(tweets){localStorage.setItem(dummyTweets,JSON.stringify(tweets));}},[tweets]);var _useState3=useState({user:\"parkhacker\",msg:\"\"}),_useState4=_slicedToArray(_useState3,2),form=_useState4[0],setForm=_useState4[1];var sortedtweets=tweets.sort(function(a,b){return b.id-a.id;});var handleButtonClick=function handleButtonClick(event){// TODO : Tweet button 엘리먼트 클릭시 작동하는 함수를 완성하세요.\n// 트윗 전송이 가능하게 작성해야 합니다.\nvar tweet={id:tweets.length+1,username:form.user,picture:form.user===\"parkhacker\"?\"https://randomuser.me/api/portraits/men/98.jpg\":\"https://randomuser.me/api/portraits/women/\".concat(getRandomNumber(1,98),\".jpg\"),content:form.msg,createdAt:new Date(),updatedAt:new Date()};setTweets(function(prev){return[].concat(_toConsumableArray(prev),[tweet]);});setForm({user:\"parkhacker\",msg:\"\"});};var handleChangeInput=function handleChangeInput(event){// TODO : Tweet input 엘리먼트에 입력 시 작동하는 함수를 완성하세요.\nvar _event$currentTarget=event.currentTarget,name=_event$currentTarget.name,value=_event$currentTarget.value;setForm(_objectSpread(_objectSpread({},form),{},_defineProperty({},name,value)));};return/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(\"div\",{className:styles.tweetForm__container,children:/*#__PURE__*/_jsxs(\"div\",{className:styles.tweetForm__wrapper,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.tweetForm__profile,children:/*#__PURE__*/_jsx(\"img\",{src:\"https://randomuser.me/api/portraits/men/98.jpg\"})}),/*#__PURE__*/_jsxs(\"div\",{className:styles.tweetForm__inputContainer,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.tweetForm__inputWrapper,children:[/*#__PURE__*/_jsxs(\"div\",{className:styles.tweetForm__input,children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"your username here..\",name:\"user\",value:form.user,className:styles[\"tweetForm__input--username\"],onChange:handleChangeInput}),/*#__PURE__*/_jsx(\"textarea\",{type:\"text\",placeholder:\"your tweet here..\",name:\"msg\",value:form.msg,className:styles[\"tweetForm__input--message\"],onChange:handleChangeInput})]}),/*#__PURE__*/_jsx(\"div\",{className:styles.tweetForm__count,role:\"status\",children:/*#__PURE__*/_jsxs(\"span\",{className:styles.tweetForm__count__text,children:[\"total: \",tweets.length]})})]}),/*#__PURE__*/_jsxs(\"div\",{className:styles.tweetForm__submit,children:[/*#__PURE__*/_jsx(\"div\",{className:styles.tweetForm__submitIcon}),/*#__PURE__*/_jsx(\"button\",{type:\"button\",className:styles.tweetForm__submitButton,onClick:handleButtonClick,children:\"Tweet\"})]})]})]})}),/*#__PURE__*/_jsx(\"div\",{className:styles.tweet__selectUser}),/*#__PURE__*/_jsx(\"ul\",{className:styles.tweets,children:sortedtweets.map(function(tweet){return/*#__PURE__*/_jsx(Tweet,{tweet:tweet},tweet.id);})}),/*#__PURE__*/_jsx(Footer,{})]});};export default Tweets;","map":{"version":3,"names":["React","useEffect","useState","Footer","Tweet","styles","dummyTweets","getRandomNumber","min","max","parseInt","Math","random","Number","Tweets","localStorage","getItem","JSON","parse","tweets","setTweets","tweets_local","setItem","stringify","user","msg","form","setForm","sortedtweets","sort","a","b","id","handleButtonClick","event","tweet","length","username","picture","content","createdAt","Date","updatedAt","prev","handleChangeInput","currentTarget","name","value","tweetForm__container","tweetForm__wrapper","tweetForm__profile","tweetForm__inputContainer","tweetForm__inputWrapper","tweetForm__input","tweetForm__count","tweetForm__count__text","tweetForm__submit","tweetForm__submitIcon","tweetForm__submitButton","tweet__selectUser","map"],"sources":["/home/yun/Desktop/abc-lab-fe-react-twittler-state-props/src/pages/Tweets/index.js"],"sourcesContent":["// TODO : useState를 react로 부터 import 합니다.\nimport React, { useEffect, useState } from 'react';\nimport Footer from '../../components/Layout/Footer';\nimport Tweet from '../../components/Tweet';\nimport styles from \"./Tweets.module.css\";\nimport dummyTweets from '../../static/dummyData';\n\nconst getRandomNumber = (min, max) => {\n  return parseInt(Math.random() * (Number(max) - Number(min) + 2));\n};\n\nconst Tweets = () => {\n  // TODO : 새로 트윗을 작성하고 전송할 수 있게 useState를 적절히 활용하세요.\n  //💡MEMO: 새로고침시에도 tweet추가한 값을 유지하고 싶어서 코드를 짜봤는데 이것저것 섞여서 복잡해보이는거 같아요.. 더 좋은 방법있을까요?\n  const [tweets, setTweets] = useState(\n    localStorage.getItem(dummyTweets) \n    ? JSON.parse(localStorage.getItem(dummyTweets))\n    : dummyTweets);\n  \n  useEffect(() => {\n    const tweets_local = localStorage.getItem(dummyTweets);\n    if (tweets_local) {\n      setTweets(JSON.parse(tweets_local));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (tweets) {\n      localStorage.setItem(dummyTweets, JSON.stringify(tweets));\n    }\n  }, [tweets]);\n\n  const [form, setForm] = useState({user: \"parkhacker\", msg: \"\"});\n\n  const sortedtweets = tweets.sort((a, b) => (b.id - a.id));\n\n  const handleButtonClick = (event) => {\n    // TODO : Tweet button 엘리먼트 클릭시 작동하는 함수를 완성하세요.\n    // 트윗 전송이 가능하게 작성해야 합니다.\n    const tweet = {\n      id: tweets.length + 1,\n      username: form.user,\n      picture: form.user === \"parkhacker\" ? \n      `https://randomuser.me/api/portraits/men/98.jpg` \n       :`https://randomuser.me/api/portraits/women/${getRandomNumber(1,98)}.jpg`,\n      content: form.msg,\n      createdAt: new Date(),\n      updatedAt: new Date(),\n    }\n    setTweets((prev)=>([...prev, tweet]));\n    setForm({user: \"parkhacker\", msg: \"\"});\n  };\n \n  const handleChangeInput = (event) => {\n    // TODO : Tweet input 엘리먼트에 입력 시 작동하는 함수를 완성하세요.\n    const {name, value} = event.currentTarget;\n    setForm({...form, [name]: value});\n  };\n\n  return (\n      <React.Fragment>\n      <div className={styles.tweetForm__container}>\n        <div className={styles.tweetForm__wrapper}>\n          <div className={styles.tweetForm__profile}>\n            <img src=\"https://randomuser.me/api/portraits/men/98.jpg\" />\n          </div>\n          <div className={styles.tweetForm__inputContainer}>\n            <div className={styles.tweetForm__inputWrapper}>\n              <div className={styles.tweetForm__input}>\n                <input\n                  type=\"text\"\n                  placeholder=\"your username here..\"\n                  name=\"user\"\n                  value={form.user}\n                  className={styles[\"tweetForm__input--username\"]}\n                  onChange={handleChangeInput}\n                ></input>\n                {/* TODO : 트윗을 작성할 수 있는 textarea 엘리먼트를 작성하세요. */}\n                <textarea\n                  type=\"text\"\n                  placeholder='your tweet here..'\n                  name=\"msg\"\n                  value={form.msg}\n                  className={styles[\"tweetForm__input--message\"]}\n                  onChange={handleChangeInput}\n                  ></textarea>\n              </div>\n              <div className={styles.tweetForm__count} role=\"status\">\n                <span className={styles.tweetForm__count__text}>\n                  {/* TODO : 트윗 총 개수를 보여줄 수 있는 Counter를 작성하세요. */}\n                  total: {tweets.length}\n                </span>\n              </div>\n            </div>\n            <div className={styles.tweetForm__submit}>\n              <div className={styles.tweetForm__submitIcon}></div>\n              {/* TODO : 작성한 트윗을 전송할 수 있는 button 엘리먼트를 작성하세요. */}\n              <button \n                type=\"button\"\n                className={styles.tweetForm__submitButton}\n                onClick={handleButtonClick}\n              >Tweet</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className={styles.tweet__selectUser}></div>\n      <ul className={styles.tweets}>\n        {/* TODO : 하나의 트윗이 아니라, 주어진 트윗 목록(dummyTweets) 갯수에 맞게 보여줘야 합니다. */}  \n        {\n          sortedtweets.map((tweet)=>{\n            return <Tweet key={tweet.id} tweet={tweet} />\n          })\n        }\n      </ul>\n      <Footer />\n    </React.Fragment>\n  );\n};\n\nexport default Tweets;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}